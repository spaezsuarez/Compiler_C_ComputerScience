
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 06 17:07:59 COT 2022
//----------------------------------------------------

package properties;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 06 17:07:59 COT 2022
  */
public class Sintaxis extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintaxis() {super();}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintaxis(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\004\000\002\013" +
    "\005\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\007\000\002\013\010\000" +
    "\002\013\007\000\002\013\007\000\002\013\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\010\000\002\013" +
    "\011\000\002\014\006\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\006\000\002\015\007\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\016\011\000\002\017\007\000\002\020" +
    "\015\000\002\021\013\000\002\022\006\000\002\022\007" +
    "\000\002\023\014\000\002\024\011\000\002\025\007\000" +
    "\002\025\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\006\004\006\111\004\001\002\000\004\103" +
    "\253\001\002\000\004\002\252\001\002\000\004\111\007" +
    "\001\002\000\004\103\010\001\002\000\004\104\011\001" +
    "\002\000\004\105\012\001\002\000\040\004\024\005\015" +
    "\006\014\007\031\010\043\011\017\012\030\013\032\027" +
    "\035\032\040\042\034\044\036\045\041\046\013\116\023" +
    "\001\002\000\004\103\233\001\002\000\004\116\uffec\001" +
    "\002\000\004\116\uffed\001\002\000\046\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\023" +
    "\ufff1\027\ufff1\030\ufff1\032\ufff1\042\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\106\ufff1\116\ufff1\001\002\000\004\116\uffe9\001" +
    "\002\000\046\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\023\ufffd\027\ufffd\030\ufffd\032" +
    "\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd\106\ufffd\116\ufffd" +
    "\001\002\000\042\004\024\005\015\006\014\007\031\010" +
    "\043\011\017\012\030\013\032\027\035\032\040\042\034" +
    "\044\036\045\041\046\013\106\232\116\023\001\002\000" +
    "\046\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\013\ufff3\023\ufff3\027\ufff3\030\ufff3\032\ufff3\042" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\106\ufff3\116\ufff3\001\002" +
    "\000\022\047\211\072\125\073\212\074\210\075\127\076" +
    "\132\077\126\100\124\001\002\000\004\116\uffee\001\002" +
    "\000\050\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\013\ufffb\023\ufffb\027\ufffb\030\ufffb\032\ufffb" +
    "\042\ufffb\043\103\044\ufffb\045\ufffb\046\ufffb\106\ufffb\116" +
    "\ufffb\001\002\000\046\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\023\uffef\027\uffef\030" +
    "\uffef\032\uffef\042\uffef\044\uffef\045\uffef\046\uffef\106\uffef" +
    "\116\uffef\001\002\000\046\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\023\ufff9\027\ufff9" +
    "\030\ufff9\032\ufff9\042\ufff9\044\ufff9\045\ufff9\046\ufff9\106" +
    "\ufff9\116\ufff9\001\002\000\004\116\uffe8\001\002\000\004" +
    "\116\uffeb\001\002\000\004\116\uffe7\001\002\000\046\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\023\ufff5\027\ufff5\030\ufff5\032\ufff5\042\ufff5\044" +
    "\ufff5\045\ufff5\046\ufff5\106\ufff5\116\ufff5\001\002\000\004" +
    "\103\200\001\002\000\004\103\162\001\002\000\004\105" +
    "\152\001\002\000\004\116\123\001\002\000\004\103\112" +
    "\001\002\000\004\103\044\001\002\000\046\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\023\ufff7\027\ufff7\030\ufff7\032\ufff7\042\ufff7\044\ufff7\045" +
    "\ufff7\046\ufff7\106\ufff7\116\ufff7\001\002\000\004\116\uffea" +
    "\001\002\000\012\101\050\102\046\116\051\117\045\001" +
    "\002\000\016\062\053\063\060\064\052\065\054\066\056" +
    "\067\057\001\002\000\006\104\uffba\112\uffba\001\002\000" +
    "\004\104\067\001\002\000\006\104\uffbb\112\uffbb\001\002" +
    "\000\016\062\053\063\060\064\052\065\054\066\056\067" +
    "\057\001\002\000\010\015\uffd9\116\uffd9\117\uffd9\001\002" +
    "\000\010\015\uffdb\116\uffdb\117\uffdb\001\002\000\010\015" +
    "\uffd8\116\uffd8\117\uffd8\001\002\000\010\015\062\116\063" +
    "\117\061\001\002\000\010\015\uffd7\116\uffd7\117\uffd7\001" +
    "\002\000\010\015\uffd6\116\uffd6\117\uffd6\001\002\000\010" +
    "\015\uffda\116\uffda\117\uffda\001\002\000\006\104\uffb6\112" +
    "\uffb6\001\002\000\006\015\064\116\065\001\002\000\006" +
    "\104\uffb7\112\uffb7\001\002\000\006\104\uffb9\112\uffb9\001" +
    "\002\000\004\015\066\001\002\000\006\104\uffb8\112\uffb8" +
    "\001\002\000\004\105\070\001\002\000\040\004\024\005" +
    "\015\006\014\007\031\010\043\011\017\012\030\013\032" +
    "\027\035\032\040\042\034\044\036\045\041\046\013\116" +
    "\023\001\002\000\042\004\024\005\015\006\014\007\031" +
    "\010\043\011\017\012\030\013\032\027\035\032\040\042" +
    "\034\044\036\045\041\046\013\106\077\116\023\001\002" +
    "\000\046\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\023\ufff2\027\ufff2\030\ufff2\032\ufff2" +
    "\042\ufff2\044\ufff2\045\ufff2\046\ufff2\106\ufff2\116\ufff2\001" +
    "\002\000\046\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\023\ufffe\027\ufffe\030\ufffe\032" +
    "\ufffe\042\ufffe\044\ufffe\045\ufffe\046\ufffe\106\ufffe\116\ufffe" +
    "\001\002\000\046\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\023\ufff4\027\ufff4\030\ufff4" +
    "\032\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\106\ufff4\116" +
    "\ufff4\001\002\000\050\004\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\023\ufffc\027\ufffc\030" +
    "\ufffc\032\ufffc\042\ufffc\043\103\044\ufffc\045\ufffc\046\ufffc" +
    "\106\ufffc\116\ufffc\001\002\000\046\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\023\ufff0" +
    "\027\ufff0\030\ufff0\032\ufff0\042\ufff0\044\ufff0\045\ufff0\046" +
    "\ufff0\106\ufff0\116\ufff0\001\002\000\046\004\uffac\005\uffac" +
    "\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\023" +
    "\uffac\027\uffac\030\uffac\032\uffac\042\uffac\044\uffac\045\uffac" +
    "\046\uffac\106\uffac\116\uffac\001\002\000\046\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\023\ufffa\027\ufffa\030\ufffa\032\ufffa\042\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\106\ufffa\116\ufffa\001\002\000\046\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\023\ufff6\027\ufff6\030\ufff6\032\ufff6\042\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\106\ufff6\116\ufff6\001\002\000\046\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\023\ufff8\027\ufff8\030\ufff8\032\ufff8\042\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\106\ufff8\116\ufff8\001\002\000\004" +
    "\105\104\001\002\000\040\004\024\005\015\006\014\007" +
    "\031\010\043\011\017\012\030\013\032\027\035\032\040" +
    "\042\034\044\036\045\041\046\013\116\023\001\002\000" +
    "\042\004\024\005\015\006\014\007\031\010\043\011\017" +
    "\012\030\013\032\027\035\032\040\042\034\044\036\045" +
    "\041\046\013\106\106\116\023\001\002\000\046\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\013" +
    "\uffb2\023\uffb2\027\uffb2\030\uffb2\032\uffb2\042\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\106\uffb2\116\uffb2\001\002\000\006\116" +
    "\111\117\110\001\002\000\006\104\uffb4\112\uffb4\001\002" +
    "\000\006\104\uffb5\112\uffb5\001\002\000\006\015\113\116" +
    "\114\001\002\000\004\116\117\001\002\000\004\104\115" +
    "\001\002\000\004\112\116\001\002\000\046\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\023\uffab\027\uffab\030\uffab\032\uffab\042\uffab\044\uffab\045" +
    "\uffab\046\uffab\106\uffab\116\uffab\001\002\000\004\015\120" +
    "\001\002\000\004\104\121\001\002\000\004\112\122\001" +
    "\002\000\046\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa" +
    "\011\uffaa\012\uffaa\013\uffaa\023\uffaa\027\uffaa\030\uffaa\032" +
    "\uffaa\042\uffaa\044\uffaa\045\uffaa\046\uffaa\106\uffaa\116\uffaa" +
    "\001\002\000\020\047\133\072\125\075\127\076\132\077" +
    "\126\100\124\112\130\001\002\000\006\116\uffcf\117\uffcf" +
    "\001\002\000\006\116\uffd3\117\uffd3\001\002\000\006\116" +
    "\uffd0\117\uffd0\001\002\000\006\116\uffd2\117\uffd2\001\002" +
    "\000\050\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\uffc2\023\uffc2\027\uffc2\030\uffc2\032\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\046\uffc2\104\uffc2\106\uffc2\116" +
    "\uffc2\001\002\000\006\116\147\117\146\001\002\000\006" +
    "\116\uffd1\117\uffd1\001\002\000\010\015\135\116\136\117" +
    "\134\001\002\000\004\112\145\001\002\000\006\015\140" +
    "\116\141\001\002\000\004\112\137\001\002\000\050\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\023\uffc0\027\uffc0\030\uffc0\032\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\104\uffc0\106\uffc0\116\uffc0\001\002" +
    "\000\004\112\144\001\002\000\004\015\142\001\002\000" +
    "\004\112\143\001\002\000\050\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\023\uffbe\027" +
    "\uffbe\030\uffbe\032\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\104\uffbe\106\uffbe\116\uffbe\001\002\000\050\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\023\uffbf\027\uffbf\030\uffbf\032\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\104\uffbf\106\uffbf\116\uffbf\001\002\000\050" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\023\uffc1\027\uffc1\030\uffc1\032\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\104\uffc1\106\uffc1\116\uffc1\001" +
    "\002\000\004\112\151\001\002\000\004\112\150\001\002" +
    "\000\050\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\023\uffc3\027\uffc3\030\uffc3\032\uffc3" +
    "\042\uffc3\044\uffc3\045\uffc3\046\uffc3\104\uffc3\106\uffc3\116" +
    "\uffc3\001\002\000\050\004\uffc4\005\uffc4\006\uffc4\007\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\023\uffc4\027\uffc4\030" +
    "\uffc4\032\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\104\uffc4" +
    "\106\uffc4\116\uffc4\001\002\000\040\004\024\005\015\006" +
    "\014\007\031\010\043\011\017\012\030\013\032\027\035" +
    "\032\040\042\034\044\036\045\041\046\013\116\023\001" +
    "\002\000\042\004\024\005\015\006\014\007\031\010\043" +
    "\011\017\012\030\013\032\027\035\032\040\042\034\044" +
    "\036\045\041\046\013\106\154\116\023\001\002\000\004" +
    "\045\155\001\002\000\004\103\156\001\002\000\012\101" +
    "\050\102\046\116\051\117\045\001\002\000\004\104\160" +
    "\001\002\000\004\112\161\001\002\000\046\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0" +
    "\023\uffb0\027\uffb0\030\uffb0\032\uffb0\042\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\106\uffb0\116\uffb0\001\002\000\004\116\163" +
    "\001\002\000\004\104\164\001\002\000\004\105\165\001" +
    "\002\000\004\030\166\001\002\000\004\116\174\001\002" +
    "\000\004\023\170\001\002\000\004\113\171\001\002\000" +
    "\040\004\024\005\015\006\014\007\031\010\043\011\017" +
    "\012\030\013\032\027\035\032\040\042\034\044\036\045" +
    "\041\046\013\116\023\001\002\000\042\004\024\005\015" +
    "\006\014\007\031\010\043\011\017\012\030\013\032\027" +
    "\035\032\040\042\034\044\036\045\041\046\013\106\173" +
    "\116\023\001\002\000\046\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\023\uffad\027\uffad" +
    "\030\uffad\032\uffad\042\uffad\044\uffad\045\uffad\046\uffad\106" +
    "\uffad\116\uffad\001\002\000\004\113\175\001\002\000\040" +
    "\004\024\005\015\006\014\007\031\010\043\011\017\012" +
    "\030\013\032\027\035\032\040\042\034\044\036\045\041" +
    "\046\013\116\023\001\002\000\044\004\024\005\015\006" +
    "\014\007\031\010\043\011\017\012\030\013\032\023\uffaf" +
    "\027\035\030\166\032\040\042\034\044\036\045\041\046" +
    "\013\116\023\001\002\000\004\023\uffae\001\002\000\012" +
    "\101\050\102\046\116\051\117\045\001\002\000\004\104" +
    "\202\001\002\000\004\105\203\001\002\000\040\004\024" +
    "\005\015\006\014\007\031\010\043\011\017\012\030\013" +
    "\032\027\035\032\040\042\034\044\036\045\041\046\013" +
    "\116\023\001\002\000\042\004\024\005\015\006\014\007" +
    "\031\010\043\011\017\012\030\013\032\027\035\032\040" +
    "\042\034\044\036\045\041\046\013\106\205\116\023\001" +
    "\002\000\050\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3" +
    "\011\uffb3\012\uffb3\013\uffb3\023\uffb3\027\uffb3\030\uffb3\032" +
    "\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\106\uffb3" +
    "\116\uffb3\001\002\000\006\116\227\117\226\001\002\000" +
    "\052\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc" +
    "\012\uffcc\013\uffcc\023\uffcc\027\uffcc\030\uffcc\032\uffcc\042" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\104\uffcc\106\uffcc\112\225" +
    "\116\uffcc\001\002\000\052\004\uffcd\005\uffcd\006\uffcd\007" +
    "\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\023\uffcd\027\uffcd" +
    "\030\uffcd\032\uffcd\042\uffcd\044\uffcd\045\uffcd\046\uffcd\104" +
    "\uffcd\106\uffcd\112\uffcd\116\uffcd\001\002\000\010\015\214" +
    "\116\215\117\213\001\002\000\052\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\023\uffce" +
    "\027\uffce\030\uffce\032\uffce\042\uffce\044\uffce\045\uffce\046" +
    "\uffce\104\uffce\106\uffce\112\uffce\116\uffce\001\002\000\004" +
    "\112\224\001\002\000\006\015\217\116\220\001\002\000" +
    "\004\112\216\001\002\000\050\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\023\uffc7\027" +
    "\uffc7\030\uffc7\032\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\104\uffc7\106\uffc7\116\uffc7\001\002\000\004\112\223\001" +
    "\002\000\004\015\221\001\002\000\004\112\222\001\002" +
    "\000\050\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\023\uffc5\027\uffc5\030\uffc5\032\uffc5" +
    "\042\uffc5\044\uffc5\045\uffc5\046\uffc5\104\uffc5\106\uffc5\116" +
    "\uffc5\001\002\000\050\004\uffc6\005\uffc6\006\uffc6\007\uffc6" +
    "\010\uffc6\011\uffc6\012\uffc6\013\uffc6\023\uffc6\027\uffc6\030" +
    "\uffc6\032\uffc6\042\uffc6\044\uffc6\045\uffc6\046\uffc6\104\uffc6" +
    "\106\uffc6\116\uffc6\001\002\000\050\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\023\uffc8" +
    "\027\uffc8\030\uffc8\032\uffc8\042\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\104\uffc8\106\uffc8\116\uffc8\001\002\000\050\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\023\uffcb\027\uffcb\030\uffcb\032\uffcb\042\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\104\uffcb\106\uffcb\116\uffcb\001\002\000" +
    "\004\112\231\001\002\000\004\112\230\001\002\000\050" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\023\uffc9\027\uffc9\030\uffc9\032\uffc9\042\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\104\uffc9\106\uffc9\116\uffc9\001" +
    "\002\000\050\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\023\uffca\027\uffca\030\uffca\032" +
    "\uffca\042\uffca\044\uffca\045\uffca\046\uffca\104\uffca\106\uffca" +
    "\116\uffca\001\002\000\004\002\000\001\002\000\024\004" +
    "\024\005\015\006\014\007\031\010\043\011\017\012\030" +
    "\013\032\116\236\001\002\000\004\112\242\001\002\000" +
    "\004\116\237\001\002\000\004\112\uffbc\001\002\000\004" +
    "\047\240\001\002\000\004\117\241\001\002\000\004\112" +
    "\uffbd\001\002\000\012\101\050\102\046\116\051\117\045" +
    "\001\002\000\004\112\244\001\002\000\024\004\024\005" +
    "\015\006\014\007\031\010\043\011\017\012\030\013\032" +
    "\116\023\001\002\000\004\104\246\001\002\000\004\105" +
    "\247\001\002\000\040\004\024\005\015\006\014\007\031" +
    "\010\043\011\017\012\030\013\032\027\035\032\040\042" +
    "\034\044\036\045\041\046\013\116\023\001\002\000\042" +
    "\004\024\005\015\006\014\007\031\010\043\011\017\012" +
    "\030\013\032\027\035\032\040\042\034\044\036\045\041" +
    "\046\013\106\251\116\023\001\002\000\046\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\023\uffb1\027\uffb1\030\uffb1\032\uffb1\042\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\106\uffb1\116\uffb1\001\002\000\004\002\001" +
    "\001\002\000\004\104\254\001\002\000\004\105\255\001" +
    "\002\000\040\004\024\005\015\006\014\007\031\010\043" +
    "\011\017\012\030\013\032\027\035\032\040\042\034\044" +
    "\036\045\041\046\013\116\023\001\002\000\042\004\024" +
    "\005\015\006\014\007\031\010\043\011\017\012\030\013" +
    "\032\027\035\032\040\042\034\044\036\045\041\046\013" +
    "\106\257\116\023\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\003\020\004\036\013" +
    "\017\016\024\017\026\020\041\021\032\023\021\024\015" +
    "\025\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\036\013\072\016\074\017\077\020" +
    "\101\021\100\023\073\024\071\025\075\001\001\000\002" +
    "\001\001\000\006\011\205\012\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\046" +
    "\001\001\000\004\007\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\070\004\036\013\017\016" +
    "\024\017\026\020\041\021\032\023\021\024\015\025\025" +
    "\001\001\000\024\004\036\013\072\016\074\017\077\020" +
    "\101\021\100\023\073\024\071\025\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\104\004\036\013\017\016\024\017\026\020\041" +
    "\021\032\023\021\024\015\025\025\001\001\000\024\004" +
    "\036\013\072\016\074\017\077\020\101\021\100\023\073" +
    "\024\071\025\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\152" +
    "\004\036\013\017\016\024\017\026\020\041\021\032\023" +
    "\021\024\015\025\025\001\001\000\024\004\036\013\072" +
    "\016\074\017\077\020\101\021\100\023\073\024\071\025" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\171\004\036" +
    "\013\017\016\024\017\026\020\041\021\032\023\021\024" +
    "\015\025\025\001\001\000\024\004\036\013\072\016\074" +
    "\017\077\020\101\021\100\023\073\024\071\025\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\175" +
    "\004\036\013\017\016\024\017\026\020\041\021\032\023" +
    "\021\024\015\025\025\001\001\000\026\004\036\013\072" +
    "\016\074\017\077\020\101\021\100\022\176\023\073\024" +
    "\071\025\075\001\001\000\002\001\001\000\004\015\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\003" +
    "\203\004\036\013\017\016\024\017\026\020\041\021\032" +
    "\023\021\024\015\025\025\001\001\000\024\004\036\013" +
    "\072\016\074\017\077\020\101\021\100\023\073\024\071" +
    "\025\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\234\014\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\242\001\001" +
    "\000\002\001\001\000\006\004\036\013\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\247\004\036" +
    "\013\017\016\024\017\026\020\041\021\032\023\021\024" +
    "\015\025\025\001\001\000\024\004\036\013\072\016\074" +
    "\017\077\020\101\021\100\023\073\024\071\025\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\255\004\036\013\017\016" +
    "\024\017\026\020\041\021\032\023\021\024\015\025\025" +
    "\001\001\000\024\004\036\013\072\016\074\017\077\020" +
    "\101\021\100\023\073\024\071\025\075\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintaxis$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintaxis$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintaxis$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintaxis$actions {
  private final Sintaxis parser;

  /** Constructor */
  CUP$Sintaxis$actions(Sintaxis parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintaxis$do_action(
    int                        CUP$Sintaxis$act_num,
    java_cup.runtime.lr_parser CUP$Sintaxis$parser,
    java.util.Stack            CUP$Sintaxis$stack,
    int                        CUP$Sintaxis$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintaxis$result;

      /* select the action based on the action number */
      switch (CUP$Sintaxis$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PRINTF ::= Printf Parent_a Comillas Identificador Comillas Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PRINTF ::= Printf Parent_a Identificador Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("PRINTF",19, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("WHILE",18, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH ::= Switch Parent_a Identificador Parent_c Llave_a SWITCH_CASE Default Dos_P SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-9)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH_CASE ::= Case Identificador Dos_P SENTENCIA SWITCH_CASE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH_CASE ::= Case Identificador Dos_P SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SWITCH_CASE",16, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parent_a SENTENCIA_BOOLEANA Parent_c P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DO_WHILE",15, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-8)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= For Parent_a DECLARACION_FOR P_coma SENTENCIA_BOOLEANA P_coma DECLARACION Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-10)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF_ELSE",13, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SENTENCIA_BOOLEANA ::= Numero OPERADOR_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SENTENCIA_BOOLEANA ::= Numero OPERADOR_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SENTENCIA_BOOLEANA ::= Identificador OPERADOR_RELACIONAL Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SENTENCIA_BOOLEANA ::= Identificador OPERADOR_RELACIONAL Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_BOOLEANA ::= Identificador OPERADOR_RELACIONAL Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_BOOLEANA ::= Identificador OPERADOR_RELACIONAL Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_BOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_BOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",11, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARACION_FOR ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARACION_FOR ::= T_DATO Identificador Asignation Numero 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",10, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARACION ::= T_DATO Identificador Asignation Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARACION ::= T_DATO Identificador Asignation Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARACION ::= T_DATO Identificador Asignation Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARACION ::= T_DATO Identificador Asignation Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION ::= T_DATO Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION ::= T_DATO Identificador OPERADOR_ATRIBUCION Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= T_DATO Identificador OPERADOR_ATRIBUCION Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Identificador Asignation Comillas Identificador Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Identificador Asignation Comillas Comillas P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-4)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Identificador Asignation Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Identificador Asignation Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Identificador OPERADOR_ATRIBUCION Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Identificador OPERADOR_ATRIBUCION Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-3)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= Identificador OPERADOR_UNARIO P_coma 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-2)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= Identificador OPERADOR_UNARIO 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPERADOR_UNARIO ::= Decrement 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERADOR_UNARIO ::= Increment 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_UNARIO",8, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OPERADOR_ATRIBUCION ::= ModuleEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_ATRIBUCION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OPERADOR_ATRIBUCION ::= DivideEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_ATRIBUCION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERADOR_ATRIBUCION ::= TimesEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_ATRIBUCION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERADOR_ATRIBUCION ::= MinusEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_ATRIBUCION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERADOR_ATRIBUCION ::= PlusEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_ATRIBUCION",7, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERADOR_CORRIMIENTO ::= RightShift 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_CORRIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERADOR_CORRIMIENTO ::= LeftShift 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_CORRIMIENTO",6, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERADOR_RELACIONAL ::= LessEqualThan 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERADOR_RELACIONAL ::= GreaterEqualThan 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERADOR_RELACIONAL ::= NotEqual 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERADOR_RELACIONAL ::= Equal 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERADOR_RELACIONAL ::= LessThan 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERADOR_RELACIONAL ::= GreatherThan 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_RELACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERADOR_LOGICO ::= Or 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERADOR_LOGICO ::= And 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OPERADOR_LOGICO ::= Not 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERADOR_LOGICO ::= DoubleOr 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OPERADOR_LOGICO ::= DoubleAnd 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR_LOGICO",4, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERADOR ::= Module 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERADOR ::= Divide 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERADOR ::= Times 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // OPERADOR ::= Resta 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // OPERADOR ::= Add 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // OPERADOR ::= Asignation 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("OPERADOR",3, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T_DATO ::= Cadena 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T_DATO ::= Double 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T_DATO ::= Float 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T_DATO ::= Long 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T_DATO ::= Short 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // T_DATO ::= Char 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // T_DATO ::= Byte 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // T_DATO ::= Int 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("T_DATO",2, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= SENTENCIA PRINTF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA SWITCH 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-5)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c 
            {
              Object RESULT =null;

              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-6)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          return CUP$Sintaxis$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)).value;
		RESULT = start_val;
              CUP$Sintaxis$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.elementAt(CUP$Sintaxis$top-1)), ((java_cup.runtime.Symbol)CUP$Sintaxis$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintaxis$parser.done_parsing();
          return CUP$Sintaxis$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

