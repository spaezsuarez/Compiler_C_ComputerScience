package properties;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Int, Byte, Char, Short, Long, Float, Double, Cadena,
        Linea, Comillas,
        Include, Define, Break, Const, Continue, Default, Register, Unsigned, Struct,
        Switch, Case,
        Typedef,
        Printf, Scanf, Cin, Cout, Using, Namespace, Std, Void,
        If, Else, Do, While, For,
        Asignation, Add, Resta, Times, Divide, Module,
        DoubleAnd, DoubleOr, Not, And, Or, GreatherThan, LessThan, Equal, NotEqual, GreaterEqualThan, LessEqualThan,
        LeftShift, RightShift, PlusEqual, Increment, Decrement, MinusEqual, TimesEqual, DivideEqual, ModuleEqual,
        True, False,
        Parent_a, Parent_c, Llave_a, Llave_c, Corchete_a, Corchete_c,
        Main, P_coma, Punto, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, T_DATO, OPERADOR, OPERADOR_LOGICO,
    OPERADOR_RELACIONAL, OPERADOR_CORRIMIENTO, OPERADOR_ATRIBUCION,
    OPERADOR_UNARIO, OPERADOR_BOOLEANO, ASIGNACION_VARIABLE, DECLARACION,
    SENTENCIA_BOOLEANA, IF, IF_ELSE, WHILE;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE 
;
T_DATO ::= Int | Byte | Char | Short | Long | Float | Double | Cadena
;
OPERADOR ::= Asignation | Add | Resta | Times | Divide | Module
;
OPERADOR_LOGICO ::= DoubleAnd | DoubleOr | Not | And | Or
;
OPERADOR_RELACIONAL ::= GreatherThan | LessThan | Equal | NotEqual | GreaterEqualThan | LessEqualThan
;
OPERADOR_CORRIMIENTO ::= LeftShift | RightShift
;
OPERADOR_ATRIBUCION ::= PlusEqual | Increment | Decrement | MinusEqual | TimesEqual | DivideEqual | ModuleEqual
;
OPERADOR_UNARIO ::= Increment | Decrement
;
OPERADOR_BOOLEANO ::= True | False
;
ASIGNACION_VARIABLE ::= T_DATO | 
;
DECLARACION ::=
    ASIGNACION_VARIABLE Identificador P_coma |
    ASIGNACION_VARIABLE Identificador OPERADOR_ATRIBUCION Numero P_coma |
    ASIGNACION_VARIABLE Identificador OPERADOR_ATRIBUCION Identificador P_coma |
    ASIGNACION_VARIABLE Identificador Asignation Numero P_coma |
    ASIGNACION_VARIABLE Identificador Asignation Identificador P_coma |
    ASIGNACION_VARIABLE Identificador OPERADOR_RELACIONAL Numero P_coma |
    ASIGNACION_VARIABLE Identificador OPERADOR_RELACIONAL Identificador P_coma |
    ASIGNACION_VARIABLE Identificador Asignation Comillas Comillas P_coma |
    ASIGNACION_VARIABLE Identificador Asignation Comillas Identificador Comillas P_coma
;
SENTENCIA_BOOLEANA ::= 
    True | 
    Identificador True |
    Identificador Numero |
    Identificador Identificador |
    Identificador Comillas Comillas |
    Identificador Comillas Identificador Comillas |
    Identificador OPERADOR_RELACIONAL Identificador |
    Identificador OPERADOR_RELACIONAL Numero |
    Numero OPERADOR_RELACIONAL Identificador |
    Numero OPERADOR_RELACIONAL Numero
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
IF_ELSE ::= IF Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
