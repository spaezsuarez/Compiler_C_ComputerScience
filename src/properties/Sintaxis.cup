package properties;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Int, Byte, Char, Short, Long, Float, Double, Cadena,
        Linea, Comillas,
        Include, Define, Break, Const, Continue, Default, Register, Unsigned, Struct,
        Switch, Case,
        Typedef,
        Printf, Scanf, Cin, Cout, Using, Namespace, Std, Void,
        If, Else, Do, While, For,
        Asignation, Add, Resta, Times, Divide, Module,
        DoubleAnd, DoubleOr, Not, And, Or, GreatherThan, LessThan, Equal, NotEqual, GreaterEqualThan, LessEqualThan,
        LeftShift, RightShift, PlusEqual, Increment, Decrement, MinusEqual, TimesEqual, DivideEqual, ModuleEqual,
        True, False,
        Parent_a, Parent_c, Llave_a, Llave_c, Corchete_a, Corchete_c,
        Main, P_coma, Punto, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, IF, IF_ELSE,
    SENTENCIA_BOOLEANA;

start with INICIO;

INICIO ::= 
    Int Main Parent_a Parent_c Llave_a SENTENCIA Llave_c |
    Main Parent_a Parent_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE 
;
DECLARACION ::=
    Cadena Identificador Equal Comillas Comillas P_coma |
    Cadena Identificador Equal Comillas Identificador Comillas P_coma
;
SENTENCIA_BOOLEANA ::= 
    True | 
    Identificador True |
    Identificador Numero |
    Identificador Identificador |
    Identificador Comillas Comillas |
    Identificador Comillas Identificador Comillas
;
IF ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c
;
IF_ELSE ::= If Parent_a SENTENCIA_BOOLEANA Parent_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

